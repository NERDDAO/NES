// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct TradeRequestData {
  uint256 requestedItem;
  uint32 quantityRequested;
  uint8 status;
  address requester;
}

library TradeRequest {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "TradeRequest", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462000000000000000000000000000054726164655265717565737400000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0039040020040114000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint32, uint8, address)
  Schema constant _valueSchema = Schema.wrap(0x003904001f030061000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "requestId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](4);
    fieldNames[0] = "requestedItem";
    fieldNames[1] = "quantityRequested";
    fieldNames[2] = "status";
    fieldNames[3] = "requester";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get requestedItem.
   */
  function getRequestedItem(bytes32 requestId) internal view returns (uint256 requestedItem) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get requestedItem.
   */
  function _getRequestedItem(bytes32 requestId) internal view returns (uint256 requestedItem) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set requestedItem.
   */
  function setRequestedItem(bytes32 requestId, uint256 requestedItem) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((requestedItem)), _fieldLayout);
  }

  /**
   * @notice Set requestedItem.
   */
  function _setRequestedItem(bytes32 requestId, uint256 requestedItem) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((requestedItem)), _fieldLayout);
  }

  /**
   * @notice Get quantityRequested.
   */
  function getQuantityRequested(bytes32 requestId) internal view returns (uint32 quantityRequested) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get quantityRequested.
   */
  function _getQuantityRequested(bytes32 requestId) internal view returns (uint32 quantityRequested) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set quantityRequested.
   */
  function setQuantityRequested(bytes32 requestId, uint32 quantityRequested) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((quantityRequested)), _fieldLayout);
  }

  /**
   * @notice Set quantityRequested.
   */
  function _setQuantityRequested(bytes32 requestId, uint32 quantityRequested) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((quantityRequested)), _fieldLayout);
  }

  /**
   * @notice Get status.
   */
  function getStatus(bytes32 requestId) internal view returns (uint8 status) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get status.
   */
  function _getStatus(bytes32 requestId) internal view returns (uint8 status) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set status.
   */
  function setStatus(bytes32 requestId, uint8 status) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((status)), _fieldLayout);
  }

  /**
   * @notice Set status.
   */
  function _setStatus(bytes32 requestId, uint8 status) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((status)), _fieldLayout);
  }

  /**
   * @notice Get requester.
   */
  function getRequester(bytes32 requestId) internal view returns (address requester) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get requester.
   */
  function _getRequester(bytes32 requestId) internal view returns (address requester) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set requester.
   */
  function setRequester(bytes32 requestId, address requester) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((requester)), _fieldLayout);
  }

  /**
   * @notice Set requester.
   */
  function _setRequester(bytes32 requestId, address requester) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((requester)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 requestId) internal view returns (TradeRequestData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 requestId) internal view returns (TradeRequestData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 requestId,
    uint256 requestedItem,
    uint32 quantityRequested,
    uint8 status,
    address requester
  ) internal {
    bytes memory _staticData = encodeStatic(requestedItem, quantityRequested, status, requester);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 requestId,
    uint256 requestedItem,
    uint32 quantityRequested,
    uint8 status,
    address requester
  ) internal {
    bytes memory _staticData = encodeStatic(requestedItem, quantityRequested, status, requester);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 requestId, TradeRequestData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.requestedItem,
      _table.quantityRequested,
      _table.status,
      _table.requester
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 requestId, TradeRequestData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.requestedItem,
      _table.quantityRequested,
      _table.status,
      _table.requester
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (uint256 requestedItem, uint32 quantityRequested, uint8 status, address requester) {
    requestedItem = (uint256(Bytes.getBytes32(_blob, 0)));

    quantityRequested = (uint32(Bytes.getBytes4(_blob, 32)));

    status = (uint8(Bytes.getBytes1(_blob, 36)));

    requester = (address(Bytes.getBytes20(_blob, 37)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (TradeRequestData memory _table) {
    (_table.requestedItem, _table.quantityRequested, _table.status, _table.requester) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 requestId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 requestId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 requestedItem,
    uint32 quantityRequested,
    uint8 status,
    address requester
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(requestedItem, quantityRequested, status, requester);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 requestedItem,
    uint32 quantityRequested,
    uint8 status,
    address requester
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(requestedItem, quantityRequested, status, requester);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 requestId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    return _keyTuple;
  }
}
