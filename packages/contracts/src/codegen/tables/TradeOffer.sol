// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct TradeOfferData {
  bytes32 requestId;
  uint256 offeredItem;
  uint32 quantityOffered;
  address offerer;
}

library TradeOffer {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "TradeOffer", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462000000000000000000000000000054726164654f66666572000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0058040020200414000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (bytes32, uint256, uint32, address)
  Schema constant _valueSchema = Schema.wrap(0x005804005f1f0361000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "offerId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](4);
    fieldNames[0] = "requestId";
    fieldNames[1] = "offeredItem";
    fieldNames[2] = "quantityOffered";
    fieldNames[3] = "offerer";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get requestId.
   */
  function getRequestId(bytes32 offerId) internal view returns (bytes32 requestId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = offerId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get requestId.
   */
  function _getRequestId(bytes32 offerId) internal view returns (bytes32 requestId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = offerId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Set requestId.
   */
  function setRequestId(bytes32 offerId, bytes32 requestId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = offerId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((requestId)), _fieldLayout);
  }

  /**
   * @notice Set requestId.
   */
  function _setRequestId(bytes32 offerId, bytes32 requestId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = offerId;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((requestId)), _fieldLayout);
  }

  /**
   * @notice Get offeredItem.
   */
  function getOfferedItem(bytes32 offerId) internal view returns (uint256 offeredItem) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = offerId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get offeredItem.
   */
  function _getOfferedItem(bytes32 offerId) internal view returns (uint256 offeredItem) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = offerId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set offeredItem.
   */
  function setOfferedItem(bytes32 offerId, uint256 offeredItem) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = offerId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((offeredItem)), _fieldLayout);
  }

  /**
   * @notice Set offeredItem.
   */
  function _setOfferedItem(bytes32 offerId, uint256 offeredItem) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = offerId;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((offeredItem)), _fieldLayout);
  }

  /**
   * @notice Get quantityOffered.
   */
  function getQuantityOffered(bytes32 offerId) internal view returns (uint32 quantityOffered) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = offerId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get quantityOffered.
   */
  function _getQuantityOffered(bytes32 offerId) internal view returns (uint32 quantityOffered) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = offerId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set quantityOffered.
   */
  function setQuantityOffered(bytes32 offerId, uint32 quantityOffered) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = offerId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((quantityOffered)), _fieldLayout);
  }

  /**
   * @notice Set quantityOffered.
   */
  function _setQuantityOffered(bytes32 offerId, uint32 quantityOffered) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = offerId;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((quantityOffered)), _fieldLayout);
  }

  /**
   * @notice Get offerer.
   */
  function getOfferer(bytes32 offerId) internal view returns (address offerer) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = offerId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get offerer.
   */
  function _getOfferer(bytes32 offerId) internal view returns (address offerer) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = offerId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set offerer.
   */
  function setOfferer(bytes32 offerId, address offerer) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = offerId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((offerer)), _fieldLayout);
  }

  /**
   * @notice Set offerer.
   */
  function _setOfferer(bytes32 offerId, address offerer) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = offerId;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((offerer)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 offerId) internal view returns (TradeOfferData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = offerId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 offerId) internal view returns (TradeOfferData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = offerId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 offerId,
    bytes32 requestId,
    uint256 offeredItem,
    uint32 quantityOffered,
    address offerer
  ) internal {
    bytes memory _staticData = encodeStatic(requestId, offeredItem, quantityOffered, offerer);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = offerId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 offerId,
    bytes32 requestId,
    uint256 offeredItem,
    uint32 quantityOffered,
    address offerer
  ) internal {
    bytes memory _staticData = encodeStatic(requestId, offeredItem, quantityOffered, offerer);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = offerId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 offerId, TradeOfferData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.requestId,
      _table.offeredItem,
      _table.quantityOffered,
      _table.offerer
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = offerId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 offerId, TradeOfferData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.requestId,
      _table.offeredItem,
      _table.quantityOffered,
      _table.offerer
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = offerId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (bytes32 requestId, uint256 offeredItem, uint32 quantityOffered, address offerer) {
    requestId = (Bytes.getBytes32(_blob, 0));

    offeredItem = (uint256(Bytes.getBytes32(_blob, 32)));

    quantityOffered = (uint32(Bytes.getBytes4(_blob, 64)));

    offerer = (address(Bytes.getBytes20(_blob, 68)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (TradeOfferData memory _table) {
    (_table.requestId, _table.offeredItem, _table.quantityOffered, _table.offerer) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 offerId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = offerId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 offerId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = offerId;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    bytes32 requestId,
    uint256 offeredItem,
    uint32 quantityOffered,
    address offerer
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(requestId, offeredItem, quantityOffered, offerer);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    bytes32 requestId,
    uint256 offeredItem,
    uint32 quantityOffered,
    address offerer
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(requestId, offeredItem, quantityOffered, offerer);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 offerId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = offerId;

    return _keyTuple;
  }
}
